function Interval(from, to){
	this.from = function(x){
	this.to = function(x){
Interval.prototype.min = function(){
Interval.prototype.max = function(){
Interval.prototype.includes = function(x){
Interval.prototype.excludes = function(x){
Interval.prototype.covers = function(inter){
Interval.prototype.offset = function(x){
Interval.prototype.scaleFrom = function(x, factor){
Interval.prototype.scaleFromMiddle = function(factor){ return this.scaleFrom(this.middle(), factor); }
Interval.prototype.scaleFromStart = function(factor){ return this.scaleFrom(this.from(), factor); }
Interval.prototype.scaleFromEnd = function(factor){ return this.scaleFrom(this.to(), factor); }
Interval.prototype.length = function(signed){
Interval.prototype.add = function(v){
Interval.prototype.ascending = function(){
Interval.prototype.descending = function(){
Interval.prototype.isAscending = function(){
Interval.prototype.isDescending = function(){
Interval.prototype.isPositive = function(){
Interval.prototype.isNegative = function(){
Interval.prototype.isPoint = function(){
Interval.prototype.reverse = function(){
Interval.prototype.middle = function(){
Interval.prototype.rapport = function(x){
Interval.prototype.clamp = function(x, circular){
Interval.prototype.random = function(){
Interval.prototype.randomMin = function(){
Interval.prototype.randomMax = function(){
Interval.prototype.randomFrom = function(){
Interval.prototype.randomTo = function(){
Interval.prototype.randomMiddle = function(){
Interval.prototype.interpolate = function(i, circular){
Interval.prototype.interpolateFromMiddle = function(i, circular){
Interval.prototype.array = function(){
Interval.prototype.intersects = function(other){
Interval.prototype.intersection = function(other){
Interval.prototype.minus = function(other){
Interval.prototype.union = function(other){
Interval.prototype.difference = function(other){
Interval.prototype.slices = function(n){
Interval.prototype.clone = function(){
Interval.prototype.toString = function(){
Interval.fromCenter = function(c, r){
Interval.unity = function(){
Interval.signedUnity = function(){
Interval.bit8 = function(){
Interval.bit16 = function(){
Interval.bit32 = function(){
Interval.bit64 = function(){
Interval.circle = function(){
Interval.circlePositive = function(){
Interval.circleNegative = function(){
Interval.circleDegree = function(){
Interval.circleDegreePositive = function(){
Interval.circleDegreeNegative = function(){
Interval.prototype.iterate = function(cb, inc_abs){
function div(x, m){
